plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'java-library'
    id 'idea'
}

group = 'com.youland'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

bootJar {
    enabled = true
}
jar {
    enabled = false
}

ext {
    docVersion = '1.6.11'
    postgresqlVersion = '42.5.0'
    h2Version = '2.1.214'
    awsSdkVersion = '2.17.261'
    secretsmanagerVersion = '1.0.8'
    microsoftGraphVersion = '5.33.0'
    azureVersion = '1.2.5'
    hutoolVersion = '5.8.5'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'ognl:ognl:3.1.15'
    // AWS SecretsManger
    implementation "com.amazonaws.secretsmanager:aws-secretsmanager-jdbc:${secretsmanagerVersion}"
    // AWS Simple Email Service
    implementation platform("software.amazon.awssdk:bom:${awsSdkVersion}")
    implementation 'software.amazon.awssdk:ses'

    // Microsoft
    implementation "com.microsoft.graph:microsoft-graph:${microsoftGraphVersion}"
    // Uncomment the line below if you are building an android application
    //implementation 'com.google.guava:guava:30.1.1-android'
    // This dependency is only needed if you are using the TokenCrendentialAuthProvider
    implementation "com.azure:azure-identity:${azureVersion}"

    //Swagger
    implementation "org.springdoc:springdoc-openapi-ui:${docVersion}"

    implementation "cn.hutool:hutool-extra:${hutoolVersion}"

    compileOnly 'org.projectlombok:lombok'

    runtimeOnly "io.micrometer:micrometer-registry-prometheus"
    // Database
    runtimeOnly "com.h2database:h2:${h2Version}"
    runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

processResources {
    filesMatching('application.*') {
        expand(project.properties)
    }
}

clean {
    delete "temp", "logs"
}

tasks.named('test') {
    useJUnitPlatform()
}

